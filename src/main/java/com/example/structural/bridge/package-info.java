/**
 * 桥接模式（Bridge Pattern）包
 *
 * 桥接模式是一种结构型设计模式，它将抽象部分与其实现部分分离，使它们都可以独立地变化。
 * 这种模式通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。
 *
 * 主要组成部分：
 * 1. 抽象类（Abstraction）：定义抽象类的接口，维护一个对实现类对象的引用
 * 2. 扩展抽象类（Refined Abstraction）：扩展抽象类接口
 * 3. 实现类接口（Implementor）：定义实现类的接口
 * 4. 具体实现类（Concrete Implementor）：实现实现类接口
 *
 * 适用场景：
 * 1. 需要在抽象化和实现化之间增加更多灵活性
 * 2. 一个类存在多个独立变化的维度，且这些维度都需要进行扩展
 * 3. 不希望使用继承或因为多层继承导致系统类的个数急剧增加
 * 4. 需要在多个对象间共享实现，但同时要求客户端完全不知道这一点
 *
 * 优点：
 * 1. 分离抽象接口及其实现部分
 * 2. 提高可扩充性
 * 3. 实现细节对客户透明
 * 4. 可以在运行时切换不同的实现
 *
 * 注意事项：
 * 1. 桥接模式的引入会增加系统的理解与设计难度
 * 2. 要求正确识别出系统中两个独立变化的维度
 * 3. 需要针对抽象化和实现化分别进行设计，这增加了系统的复杂度
 *
 * 本包中的示例通过遥控器和设备展示了桥接模式的实现：
 * - RemoteControl：抽象类，定义遥控器的基本操作
 * - AdvancedRemoteControl：扩展抽象类，增加更多控制功能
 * - Device：实现类接口，定义设备的基本功能
 * - TV：具体实现类，实现电视机的具体功能
 */
package com.example.structural.bridge;
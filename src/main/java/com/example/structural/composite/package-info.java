/**
 * 组合模式（Composite Pattern）包
 *
 * 组合模式是一种结构型设计模式，它允许你将对象组合成树形结构来表现"整体/部分"层次结构。
 * 组合能让客户以一致的方式处理个别对象以及组合对象。
 *
 * 主要组成部分：
 * 1. 抽象组件（Component）：为组合中的对象声明接口，定义组合对象和叶子对象的共同行为
 * 2. 叶子（Leaf）：在组合中表示叶子节点对象，叶子节点没有子节点
 * 3. 组合（Composite）：定义有子部件的那些部件的行为，存储子部件，实现组件接口相关操作
 * 4. 客户端（Client）：通过组件接口操作组合部件的对象
 *
 * 适用场景：
 * 1. 需要表示对象的部分-整体层次结构时
 * 2. 希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象
 * 3. 处理树形结构时，如文件系统、公司组织架构等
 * 4. 需要统一处理简单和复杂对象的场景
 *
 * 优点：
 * 1. 定义了包含基本对象和组合对象的类层次结构
 * 2. 简化客户端代码，客户端可以一致地使用组合对象和单个对象
 * 3. 容易增加新类型的组件
 * 4. 符合开闭原则，对扩展友好
 *
 * 注意事项：
 * 1. 很难限制组合中的组件类型，可能需要在运行时进行类型检查
 * 2. 在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口
 * 3. 在增加新的组件时需要考虑现有代码的兼容性
 *
 * 本包中的示例通过文件系统展示了组合模式的实现：
 * - FileSystemComponent：抽象组件，定义文件系统项的通用操作
 * - File：叶子节点，表示具体文件
 * - Directory：组合节点，可以包含子文件和子目录
 * - FileExplorer：客户端，统一处理文件和目录
 */
package com.example.structural.composite;
/**
 * 工厂方法模式（Factory Method Pattern）包
 *
 * 工厂方法模式是一种创建型设计模式，它定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。
 * 工厂方法模式让一个类的实例化延迟到其子类，将对象的创建过程封装在工厂类中。
 *
 * 主要组成部分：
 * 1. 抽象工厂（Creator）：声明工厂方法，返回产品对象
 * 2. 具体工厂（Concrete Creator）：重写工厂方法以返回具体产品实例
 * 3. 抽象产品（Product）：定义工厂方法所创建的对象的接口
 * 4. 具体产品（Concrete Product）：实现抽象产品接口的具体对象
 *
 * 适用场景：
 * 1. 当一个类不知道它所必须创建的对象的类时
 * 2. 当一个类希望由其子类来指定它所创建的对象时
 * 3. 当类将创建对象的职责委托给多个帮助子类中的某一个，并且你希望将哪一个帮助子类是代理者这一信息局部化时
 *
 * 优点：
 * 1. 良好的封装性，代码结构清晰
 * 2. 扩展性好，增加新产品只需添加具体工厂和产品类
 * 3. 屏蔽产品的具体实现，调用者只关心产品的接口
 * 4. 符合开闭原则和单一职责原则
 *
 * 注意事项：
 * 1. 需要创建的对象较少时，不适合使用工厂方法模式
 * 2. 客户端需要知道具体工厂类，增加了系统的复杂度
 * 3. 增加新产品时，需要同时添加新的工厂类，导致系统类的个数成对增加
 *
 * 本包中的示例通过日志记录器展示了工厂方法模式的实现：
 * - LoggerFactory：抽象工厂，定义创建日志记录器的接口
 * - FileLoggerFactory：具体工厂，创建文件日志记录器
 * - Logger：抽象产品，定义日志记录器接口
 * - FileLogger：具体产品，实现文件日志记录功能
 */
package com.example.creational.factorymethod;
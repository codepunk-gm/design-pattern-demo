/**
 * 原型模式（Prototype Pattern）包
 *
 * 原型模式是一种创建型设计模式，它通过复制现有对象来创建新对象，而不是通过实例化类来创建。
 * 当直接创建对象的代价比较大时，则采用这种模式，通过克隆一个对象来创建一个新的实例。
 *
 * 主要组成部分：
 * 1. 原型接口（Prototype）：声明克隆自身的接口
 * 2. 具体原型（Concrete Prototype）：实现克隆的具体类
 * 3. 客户端（Client）：通过请求原型克隆自身来创建新对象
 *
 * 适用场景：
 * 1. 当一个系统应该独立于其产品的创建、构成和表示时
 * 2. 当要实例化的类是在运行时刻指定时
 * 3. 当对象的创建成本较大时
 * 4. 当系统要求产生的对象比较接近时
 *
 * 优点：
 * 1. 可以在运行时动态改变具体的实现类型
 * 2. 可以在运行时获得对象的状态
 * 3. 可以避免重复的对象初始化代码
 * 4. 比直接实例化对象更有效率
 *
 * 注意事项：
 * 1. 对象的克隆可能会很复杂，特别是对象有多层嵌套引用时
 * 2. 必须实现克隆方法，可能需要考虑深克隆和浅克隆的问题
 * 3. 克隆时可能会破坏单例模式的限制
 *
 * 本包中的示例通过文档系统展示了原型模式的实现：
 * - Document：原型接口，定义克隆方法
 * - TextDocument：具体原型，实现文本文档的克隆
 * - DocumentManager：客户端，管理文档的克隆和创建
 */
package com.example.creational.prototype;
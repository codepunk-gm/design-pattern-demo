/**
 * 单例模式（Singleton Pattern）包
 *
 * 单例模式是一种创建型设计模式，它确保一个类只有一个实例，并提供一个全局访问点来访问这个实例。
 * 单例模式是最简单的设计模式之一，但在实现时需要注意线程安全问题。
 *
 * 主要组成部分：
 * 1. 私有构造函数：防止外部直接创建实例
 * 2. 私有静态实例：保存类的唯一实例
 * 3. 公有静态访问方法：提供获取实例的全局访问点
 *
 * 适用场景：
 * 1. 需要一个类只有一个实例，并且客户端可以从一个众所周知的访问点访问它
 * 2. 当这个唯一实例应该是通过子类化可扩展的，并且客户端应该无需更改代码就能使用扩展的实例
 * 3. 需要控制资源的使用，比如数据库连接池
 *
 * 优点：
 * 1. 保证一个类只有一个实例
 * 2. 提供了对唯一实例的全局访问点
 * 3. 可以节省系统资源
 *
 * 注意事项：
 * 1. 多线程环境下需要特别注意线程安全问题
 * 2. 注意延迟加载和性能之间的权衡
 * 3. 序列化可能会破坏单例模式，需要特别处理
 *
 * 本包中包含多种单例模式的实现方式：
 * - HungrySingleton：饿汉式单例，线程安全但不支持延迟加载
 * - LazySingleton：懒汉式单例，支持延迟加载但非线程安全
 * - SynchronizedLazySingleton：同步的懒汉式单例，线程安全但性能较差
 * - DoubleCheckLockingSingleton：双重检查锁定单例，线程安全且支持延迟加载
 * - StaticInnerClassSingleton：静态内部类单例，线程安全且支持延迟加载
 * - EnumSingleton：枚举单例，线程安全且防止序列化破坏
 */
package com.example.creational.singleton;
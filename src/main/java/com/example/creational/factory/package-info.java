/**
 * 工厂方法模式（Factory Method Pattern）包
 *
 * 工厂方法模式是一种创建型设计模式，它定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。
 * 工厂方法让类把实例化推迟到子类。
 *
 * 主要组成部分：
 * 1. 抽象工厂（Creator）：声明工厂方法，返回产品对象
 * 2. 具体工厂（Concrete Creator）：实现工厂方法以创建具体产品
 * 3. 抽象产品（Product）：定义工厂方法所创建的对象的接口
 * 4. 具体产品（Concrete Product）：实现抽象产品接口的具体对象
 *
 * 适用场景：
 * 1. 当一个类不知道它所必须创建的对象的类时
 * 2. 当一个类希望由它的子类来指定它所创建的对象时
 * 3. 当类将创建对象的职责委托给多个帮助子类中的某一个，并且你希望将哪一个帮助子类是代理者这一信息局部化时
 *
 * 优点：
 * 1. 符合开闭原则，新增产品时只需添加具体工厂和产品类
 * 2. 符合单一职责原则，每个具体工厂类只负责创建对应的产品
 * 3. 客户端只需要知道所需产品的抽象类，无须关心具体实现类
 *
 * 注意事项：
 * 1. 系统中类的个数将成对增加，在一定程度上增加了系统的复杂度
 * 2. 增加了系统的抽象性和理解难度
 * 3. 引入新产品时需要编写新的具体产品类和对应的具体工厂类
 *
 * 本包中的示例通过日志记录器展示了工厂方法模式的实现：
 * - LoggerFactory：抽象工厂接口，定义创建日志记录器的方法
 * - FileLoggerFactory/ConsoleLoggerFactory：具体工厂类
 * - Logger：抽象产品接口
 * - FileLogger/ConsoleLogger：具体产品类
 */
package com.example.creational.factory;
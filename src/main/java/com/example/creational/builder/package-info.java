/**
 * 建造者模式（Builder Pattern）包
 *
 * 建造者模式是一种创建型设计模式，它允许您创建复杂对象的不同表示，同时保持相同的构建过程。
 * 建造者模式将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。
 *
 * 主要组成部分：
 * 1. 建造者（Builder）：为创建一个产品对象的各个部件指定抽象接口
 * 2. 具体建造者（Concrete Builder）：实现Builder接口，构建和装配各个部件
 * 3. 指挥者（Director）：构造一个使用Builder接口的对象，指导构建过程
 * 4. 产品（Product）：表示被构造的复杂对象
 *
 * 适用场景：
 * 1. 需要生成的对象具有复杂的内部结构
 * 2. 需要生成的对象内部属性本身相互依赖
 * 3. 对象的创建过程独立于创建该对象的类
 * 4. 隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品
 *
 * 优点：
 * 1. 建造者独立，易扩展
 * 2. 便于控制细节风险
 * 3. 可以精细地控制产品的创建过程
 * 4. 可以更好地控制产品的创建过程
 *
 * 注意事项：
 * 1. 产品必须有共同点，范围有限制
 * 2. 如果内部变化复杂，会有很多的建造者类
 * 3. 建造者模式所创建的产品一般具有较多的共同点，其组成部分相似
 *
 * 本包中的示例通过计算机组装展示了建造者模式的实现：
 * - ComputerBuilder：抽象建造者，定义创建计算机各部件的接口
 * - GamingComputerBuilder：具体建造者，实现游戏电脑的构建
 * - ComputerDirector：指挥者，控制构建过程
 * - Computer：产品，表示被构建的计算机
 */
package com.example.creational.builder;
/**
 * 责任链模式（Chain of Responsibility Pattern）包
 *
 * 责任链模式是一种行为型设计模式，它通过为请求创建一个接收者对象的链来避免请求的发送者和接收者之间的耦合关系。
 * 链中的每个接收者都包含对另一个接收者的引用，如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者。
 *
 * 主要组成部分：
 * 1. 处理者（Handler）：定义一个处理请求的接口，包含对下一个处理者的引用
 * 2. 具体处理者（Concrete Handler）：处理它所负责的请求，可以访问它的后继者
 * 3. 客户端（Client）：向链上的具体处理者对象提交请求
 *
 * 适用场景：
 * 1. 有多个对象可以处理一个请求，哪个对象处理该请求运行时自动确定
 * 2. 想在不明确指定接收者的情况下，向多个对象中的一个提交一个请求
 * 3. 可动态指定一组对象处理请求，或添加新的处理者
 * 4. 处理流程需要分级处理或有优先级的情况
 *
 * 优点：
 * 1. 降低耦合度，请求发送者和接收者解耦
 * 2. 简化了对象，对象不需要知道链的结构
 * 3. 增强给对象指派职责的灵活性
 * 4. 增加新的请求处理类很方便
 *
 * 注意事项：
 * 1. 链过长或处理时间过长会影响性能
 * 2. 可能导致请求不被处理
 * 3. 不容易观察运行时的特征，不易排查问题
 *
 * 本包中的示例通过日志处理系统展示了责任链模式的实现：
 * - LogHandler：抽象处理者，定义日志处理接口
 * - ConsoleLogHandler：具体处理者，处理控制台日志
 * - FileLogHandler：具体处理者，处理文件日志
 * - ErrorLogHandler：具体处理者，处理错误日志
 */
package com.example.behavioral.chainofresponsibility;
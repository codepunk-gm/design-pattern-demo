/**
 * 命令模式（Command Pattern）包
 *
 * 命令模式是一种行为型设计模式，它将一个请求封装为一个对象，从而使你可以用不同的请求对客户进行参数化，
 * 对请求排队或记录请求日志，以及支持可撤销的操作。
 *
 * 主要组成部分：
 * 1. 命令（Command）：声明执行操作的接口
 * 2. 具体命令（Concrete Command）：实现命令接口，定义动作和接收者之间的绑定关系
 * 3. 接收者（Receiver）：知道如何实施与执行一个请求相关的操作
 * 4. 调用者（Invoker）：要求命令执行这个请求
 * 5. 客户端（Client）：创建具体命令对象并设定其接收者
 *
 * 适用场景：
 * 1. 需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互
 * 2. 需要在不同的时间指定请求、将请求排队和执行请求
 * 3. 需要支持命令的撤销和恢复操作
 * 4. 需要将一组操作组合在一起，即支持宏命令
 *
 * 优点：
 * 1. 降低系统的耦合度，命令模式将调用操作的对象与知道如何实现该操作的对象解耦
 * 2. 容易地设计一个命令队列和宏命令（组合命令）
 * 3. 可以方便地实现对请求的撤销和重做
 * 4. 在需要的情况下，可以较容易地将命令记入日志
 *
 * 注意事项：
 * 1. 可能会导致某些系统有过多的具体命令类
 * 2. 系统需要支持命令的撤销和恢复操作时，需要额外的内存空间保存历史命令
 * 3. 在处理大量命令时可能会影响系统性能
 *
 * 本包中的示例通过遥控器系统展示了命令模式的实现：
 * - Command：命令接口，定义执行操作的方法
 * - LightOnCommand/LightOffCommand：具体命令，实现开关灯操作
 * - Light：接收者，执行实际的开关操作
 * - RemoteControl：调用者，存储并执行命令
 */
package com.example.behavioral.command;
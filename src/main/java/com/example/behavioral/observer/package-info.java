/**
 * 观察者模式（Observer Pattern）包
 *
 * 观察者模式是一种行为型设计模式，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。
 * 当主题对象发生变化时，它的所有依赖者（观察者）都会收到通知并自动更新。
 *
 * 主要组成部分：
 * 1. 主题（Subject）：定义观察者集合，提供添加和删除观察者的方法
 * 2. 具体主题（Concrete Subject）：将有关状态存入具体观察者对象，在具体主题内部状态改变时，通知所有观察者
 * 3. 观察者（Observer）：定义一个更新接口，使得在主题状态发生改变时能够得到通知
 * 4. 具体观察者（Concrete Observer）：实现观察者更新接口，以便在得到主题更改通知时更新自身状态
 *
 * 适用场景：
 * 1. 当一个对象的改变需要同时改变其他对象，而且它不知道具体有多少对象有待改变时
 * 2. 当一个抽象模型有两个方面，其中一个方面依赖于另一个方面，将这两者封装在独立的对象中使它们可以各自独立地改变和复用
 * 3. 当对一个对象的改变需要通知其他对象，而不知道这些对象是谁时
 * 4. 需要在系统中创建一个触发链时
 *
 * 优点：
 * 1. 观察者和主题之间是抽象耦合，可以独立改变和复用
 * 2. 支持广播通信，主题向所有已注册的观察者发送通知
 * 3. 符合开闭原则，增加新的观察者无需修改原有代码
 *
 * 注意事项：
 * 1. 如果一个主题对象有很多直接和间接的观察者，通知所有观察者会花费很多时间
 * 2. 如果观察者和主题之间有循环依赖，可能导致系统崩溃
 * 3. 观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的
 *
 * 本包中的示例通过新闻订阅系统展示了观察者模式的实现：
 * - NewsAgency：主题接口，定义添加、删除和通知观察者的方法
 * - NewsChannel：观察者接口，定义更新方法
 * - NewsProvider：具体主题，实现新闻发布和观察者管理
 * - NewsSubscriber：具体观察者，实现新闻接收和处理
 */
package com.example.behavioral.observer;